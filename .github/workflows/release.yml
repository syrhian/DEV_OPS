name: Docker Release Workflow

on:
  push:
    branches:
      - relWorkflow

jobs:
  test:
    name: Docker Compose Test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_db

      phpmyadmin:
        image: phpmyadmin/phpmyadmin:latest
        ports:
          - 8080:80
        depends_on:
          - mysql
        env:
          PMA_HOST: mysql
          MYSQL_ROOT_PASSWORD: root_password

  build_package:
    name: Build and Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Build Docker Image
        run: |
          docker build -t mon_image .
          docker tag mon_image:latest mon_image:$(git rev-parse --short $GITHUB_SHA)

  scan_security:
    name: Scan Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Scan Docker Image
        run: |
          # Utiliser un outil de scan de sécurité comme Clair, Trivy, etc. sur l'image Docker

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build_package, scan_security]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Generate Release Notes
        run: |
          git log --format='%h %s' $(git describe --tags --abbrev=0)..HEAD > release_notes.txt
          cat release_notes.txt
      - name: Publish Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: mon_image:latest, mon_image:${{ github.sha }}
          registry: ${{ secrets.DOCKER_REGISTRY_URL }}
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
